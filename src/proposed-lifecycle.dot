digraph lifecycle {
  graph [style=filled,color=lightgrey]
  node [style=filled,color=white];

  subgraph cluster_service {
    label = "Service";
    href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#ServiceStatus"

    ServiceConditionReady [label=Ready, href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#ServiceConditionReady"]
    ServiceConditionConfigurationsReady [label=ConfigurationsReady, href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#ServiceConditionConfigurationsReady"]
    ServiceConditionRoutesReady [label=RoutesReady, href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#ServiceConditionRoutesReady"]

    ServiceConditionReady -> ServiceConditionConfigurationsReady
    ServiceConditionReady -> ServiceConditionRoutesReady
  }

  subgraph cluster_route {
    label = "Route";
    href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#RouteStatus"

    RouteConditionReady [label=Ready, href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#RouteConditionReady"]
    RouteConditionAllTrafficAssigned [label=AllTrafficAssigned, href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#RouteConditionAllTrafficAssigned"]
    RouteConditionIngressReady [label=IngressReady, href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#RouteConditionIngressReady"]
    RouteConditionCertificateProvisioned [label=CertificateProvisioned,style="filled,dashed",fillcolor=white,color=black, href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#RouteConditionCertificateProvisioned"]

    RouteConditionReady -> RouteConditionAllTrafficAssigned
    RouteConditionReady -> RouteConditionIngressReady
  }

  subgraph cluster_configuration {
    label = "Configuration";
    href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#ConfigurationStatus"

    ConfigurationConditionReady [label=Ready, href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#ConfigurationConditionReady"]
  }

  subgraph cluster_revision {
    label = "Revision";
    href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#RevisionStatus"

    RevisionConditionReady [label=Ready, href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#RevisionConditionReady"]
    RevisionConditionDeploymentReady [label=DeploymentReady]
    RevisionConditionAutoscalerReady [label=AutoscalerReady]
    RevisionConditionActive [label=Active,style="filled,dashed",fillcolor=white,color=black, href="https://godoc.org/github.com/knative/serving/pkg/apis/serving/v1alpha1#RevisionConditionActive"]

    RevisionConditionReady -> RevisionConditionDeploymentReady
    RevisionConditionReady -> RevisionConditionAutoscalerReady
  }

  subgraph cluster_ingress {
    label = "Ingress";
    href="https://godoc.org/github.com/knative/serving/pkg/apis/networking/v1alpha1#IngressStatus"

    IngressConditionReady [label=Ready, href="https://godoc.org/github.com/knative/serving/pkg/apis/networking/v1alpha1#IngressConditionReady"]
    IngressConditionNetworkConfigured [label=NetworkConfigured, href="https://godoc.org/github.com/knative/serving/pkg/apis/networking/v1alpha1#IngressConditionNetworkConfigured"]
    IngressConditionLoadBalancerReady [label=LoadBalancerReady, href="https://godoc.org/github.com/knative/serving/pkg/apis/networking/v1alpha1#IngressConditionLoadBalancerReady"]

    IngressConditionReady -> IngressConditionNetworkConfigured
    IngressConditionReady -> IngressConditionLoadBalancerReady
  }

  subgraph cluster_kpa {
    label = "PodAutoscaler";
    href="https://godoc.org/github.com/knative/serving/pkg/apis/autoscaling/v1alpha1#PodAutoscalerStatus"

    PodAutoscalerConditionReady [label=Ready, href="https://godoc.org/github.com/knative/serving/pkg/apis/autoscaling/v1alpha1#PodAutoscalerConditionReady"]
    PodAutoscalerConditionActive [label=Active, href="https://godoc.org/github.com/knative/serving/pkg/apis/autoscaling/v1alpha1#PodAutoscalerConditionActive",style="filled,dashed",fillcolor=white,color=black]
    PodAutoscalerConditionPodsReady [label=PodsReady]

    PodAutoscalerConditionReady -> PodAutoscalerConditionPodsReady 
  }

  subgraph cluster_certificate {
    label = "Certificate";
    href="https://godoc.org/github.com/knative/serving/pkg/apis/networking/v1alpha1#CertificateStatus"

    CertificateConditionReady [label=Ready, href="https://godoc.org/github.com/knative/serving/pkg/apis/networking/v1alpha1#CertificateConditionReady"]
  }

  subgraph cluster_sks {
    label = "ServerlessService";
    href="https://godoc.org/github.com/knative/serving/pkg/apis/networking/v1alpha1#ServerlessServiceStatus"

    ServerlessServiceConditionReady [label=Ready, href="https://godoc.org/github.com/knative/serving/pkg/apis/networking/v1alpha1#ServerlessServiceConditionReady"]
    ServerlessServiceConditionEndspointsPopulated [label=EndpointsPopulated, href="https://godoc.org/github.com/knative/serving/pkg/apis/networking/v1alpha1#ServerlessServiceConditionEndspointsPopulated"]

    ServerlessServiceConditionReady -> ServerlessServiceConditionEndspointsPopulated
  }

  subgraph cluster_pods {
    label = "Pod (approximate)";
    href = "https://godoc.org/k8s.io/api/core/v1#PodStatus"
    style = filled
    color = lightblue
    PodReady [label=Ready, href="https://godoc.org/k8s.io/api/core/v1#PodReady"]
    PodScheduled [label=Scheduled, href="https://godoc.org/k8s.io/api/core/v1#PodScheduled"]
    PodInitialized [label=Initialized, href="https://godoc.org/k8s.io/api/core/v1#PodInitialized"]
    ContainersReady [label=ContainersReady, href="https://godoc.org/k8s.io/api/core/v1#ContainersReady"]
    ContainerStatus [label=ContainerStatus, href="https://godoc.org/k8s.io/api/core/v1#ContainerStatus"]

    PodReady -> ContainersReady
    PodReady -> PodInitialized
    PodInitialized -> PodScheduled

    ContainersReady -> ContainerStatus
  }

  subgraph cluster_deployment {
    label = "Deployment (approximate)";
    href = "https://godoc.org/k8s.io/api/apps/v1#DeploymentStatus"
    style = filled
    color = lightblue

    DeploymentAvailable [label=Available, href="https://godoc.org/k8s.io/api/apps/v1#DeploymentAvailable"]
    DeploymentProgressing [label=Progressing, href="https://godoc.org/k8s.io/api/apps/v1#DeploymentProgressing"]
    DeploymentReplicaFailure [label=ReplicaFailure, href="https://godoc.org/k8s.io/api/apps/v1#DeploymentReplicaFailure"]
  }

  subgraph cluster_deploymentstatus {
    label = "DeploymentStatus (reified)";

    DeploymentStatusReady [label=Ready]
    DeploymentStatusProgressing [label=Progressing]
    DeploymentStatusReplicaSetReady [label=ReplicaSetReady]

    DeploymentStatusReady -> DeploymentStatusProgressing
    DeploymentStatusReady -> DeploymentStatusReplicaSetReady
  }

  subgraph cluster_podstatus {
    label = "PodStatus (reified)";

    PodStatusReady [label=Ready]
    PodStatusContainerReady [label=ContainersReady]
    PodStatusPodScheduled [label=PodScheduled]

    PodStatusReady -> PodStatusPodScheduled
    PodStatusReady -> PodStatusContainerReady
  }

  ServiceConditionConfigurationsReady -> ConfigurationConditionReady
  ServiceConditionRoutesReady -> RouteConditionReady

  RouteConditionCertificateProvisioned -> CertificateConditionReady
  RouteConditionIngressReady -> IngressConditionReady

  ConfigurationConditionReady -> RevisionConditionReady

  RevisionConditionDeploymentReady -> DeploymentStatusReady
  RevisionConditionAutoscalerReady -> PodAutoscalerConditionReady

  RevisionConditionActive -> PodAutoscalerConditionActive

  PodAutoscalerConditionActive -> ServerlessServiceConditionReady
  PodAutoscalerConditionPodsReady -> PodStatusReady

  DeploymentAvailable -> PodReady

  DeploymentStatusProgressing -> DeploymentProgressing
  DeploymentStatusReplicaSetReady -> DeploymentReplicaFailure

  PodStatusPodScheduled -> PodScheduled
  PodStatusContainerReady -> ContainerStatus
}
